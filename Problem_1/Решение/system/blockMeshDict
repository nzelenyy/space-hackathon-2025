/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.001;					// convert size to mm

// Variable parameters
alpha   	#calc "50.0 * 0.0174533";	// Angle of inclination of the plate in radians
b		#calc "0.1 * 25.4";		// Nozzle diameter in mm
l		#calc "120.0 * $b";		// Length of the inclined plate

// Calculated sizes
area_len   	#calc "$b * 200";			// Length of the calculated area
nozzle_len   	#calc "$b * 10";			// Nozzle length
plate_wid	#calc "$l * sin($alpha)";		// Vertical size of inclination plate
plate_len	#calc "$l * cos($alpha)";		// Horizontal size of inclination plate

vertices
(
    // zero block - nozzle
    (0 0 0)					// 0
    (-$nozzle_len 0 0)				// 1
    (-$nozzle_len $b 0)				// 2
    (0 $b 0)					// 3
    (0 0 1)					// 4
    (-$nozzle_len 0 1)				// 5
    (-$nozzle_len $b 1)				// 6
    (0 $b 1)					// 7
    // first block - area upper then inclined plate
    ($area_len 0 0)				// 8
    ($area_len $b 0)				// 9
    ($area_len 0 1)				// 10
    ($area_len $b 1)				// 11
    // second block - area with inclined plate
    ($plate_len -$plate_wid 0)			// 12
    ($area_len -$plate_wid 0)			// 13
    ($plate_len -$plate_wid 1)			// 14
    ($area_len -$plate_wid 1)			// 15
);

blocks
(
    hex (0 3 2 1 4 7 6 5)		(20 20 1) simpleGrading (1 1 1)			// 0
    hex (0 8 9 3 4 10 11 7)		(100 20 1) simpleGrading (1 1 1)		// 1
    hex (12 13 8 0 14 15 10 4)		(100 100 1) simpleGrading (1 1 1)		// 2
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (5 6 2 1)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (15 14 12 13)
            (10 15 13 8)
            (11 10 8 9)
            (7 11 9 3)
        );
    }
    walls
    {
        type wall;
        faces
        (
            (4 5 1 0)
            (6 7 3 2)
            (14 4 0 12)
        );
    }
    topAndBottom
    {
        type empty;
        faces           
        (
       	    (4 7 6 5)
       	    (15 10 4 14)
       	    (10 11 7 4)
       	    (0 1 2 3)
       	    (8 0 3 9)
       	    (13 12 0 8)
        );
    }
);


// ************************************************************************* //
